Design Document
Assignment 1 : Shell

Purpose:
This document specifies the design of a shell program.

Assumptions:
The program will be used by a user to execute different commands from
a command line interface.
The input will come from the keyboard, and the output will be displayed
on the console.

Data:
1. Flag setting structure
   - stores which special characters were passed
   
2. Path storing structure
   - stores paths that may have been passed through CLI
   - stores a 2nd command from a pipe

Operations:
We will have 6 important functions that will be called in our main:

1. void set_path(index, arguments, paths)
   - Description: a function that stores the path of a requested
                  redirection
   - Input: index in an array of arguments and pointer to a path
            variable
   - Output: nothing
   - Result: path of an I/O redirection

2. int special_char (index, arguments, special flags, paths)
   - Description: This function checks to see if any single
                  letter argument is a special one.
   - Input: index in an array of arguments, a special flags structure
            and pointer to a path variable
   - Output: returns TRUE if the argument is a special character, false
             otherwise
   - result: A record of which special character was passed

3. void reset_flags(special flags)
   - Description: Resets the special flags to zero, so they dont carry
                  over to the next command.
   - Input: Special flags structure
   - Output: nothing
   - result: resets the special flag structure to 0's

4. void parse_args(special flags, paths, arguments)
   - Description: Parses the given arguments
   - Input: Special flags structure, paths structure, arguments
   - Output: none
   - result: Arguments stored in an array with a record of special
             flags passed.

5. void execute(special flags, paths, arguments);
   - Description: this function handles forking, redirection to files,
                  background processes,and executes commands
   - Input: Special flags counter, paths for redirection, and arguments
            passed by user
   - Output: nothing
   - result: creates a child process to execute the commands passed by
             user

6. int shell_cmd(arguments)
   - Description: this function handles exit and cd (change directory)
   - Input: arguments
   - Output: True if a cd was performed, otherwise an exit was called
   - result: Exits the program or changes the directory

Our shell supports the following commands and system calls:

1. The internal shell command exit which terminates the shell
We will use the system call: exit()

exit(): The exit() system call terminates the calling process

2. A command with no arguments
We will use the system calls fork(), execvp(), exit() and wait()

fork(): The fork() system call creates a copy of the parent process. The original process fork() is
the parent process and the newly created process is the child process. Both processes return from
the system call and execute the next instruction.The system calls does not take any arguments and it
returns a negative value when the creation of a child process was not successful.Otherwise fork() returns a zero.

execvp() has two aruments: path and argv.
 -path: the location of the new process image
 -argv: pointer to an array of pointers to null-terminated character strings.

wait(): The wait() system call blocks the calling process untill one of its child
processes exits or a signal is recieved.
If there are at least one child processes running when the call to wait() is made,
the called will be blocked until one of its child processes exits.
If there is no child processes running when the call to wait() is made, then this
wait() has no effect at all.

3. A command with arguments
Concepts: Command-line parameters
Details: Argument 0 is the name of the command

-Our shell can execute commands like ls -l

4. A command, with or without arguments, executed in the background using &

We will use system calls sigset()

sigset() is the system call that helps execute commands in the background.

In our code we have a function called sigset_handler(signal)
which does a wait(&status);

In our main function we use sigset calling the sigset_handler funtion we
created: sigset(SIGCHL,sigset_handler)


5. A command with or without arguments whose output is redirected to a file

We will use system call: freopen()

example:ls -l>foo

freopen() system call take in parameters: char *path, char *mode, and FILE *stream.
-freopen opens the file whose name is in the string pointed by the path and
associates a stream with it.
-mode specifies either r(open file for reading), w(create file for writing), w+,r+,etc.
We implement this by scanning the argunemts given by the user and if we encounted a ">"
special characted, we store the path that is given, and moce the arguments to the
left by one. This allows our shell to perform I/O redirection.
Note: execvp() will not perform redirection.

We create a file from the path provided if file is not specified,and redirect the
output to the specified file:

pid_t= fork();

if(pid==0)
{
   if(special_flags.set == TRUE)
{
        if(special_flags.file_out == TRUE)
        {
          freopen(path, "w", stdout);
        }
}


6. A command with or without arguments whose input is redirected from a file
example: sort<testfile>

System call: freopen()

Algorithms:

Algorithm for set_path():
1. If there is an argument after the special character, store it as
   the path.
   Else, print an error message.

Algorithm for separate_args():
1. If the arguments passed will not go through a subshell

2.    Traverse through the arguments after the semicolon

3.    Copy the arguments after the semicolon and store them in another
      array.
      
Algorithm for remove_paren():
1. Traverse through the array of arguments, and remove any "(" or ")"
   that is encountered.
   If a ")" is found, replace with the argument after it, if not NULL.
 
Algorithm for special_char():
1. Set a flag for the special character that was passed.

2. If the special character is a bracket or a | for a pipe, store the
   path.
   
3. If no special character was passed, return FALSE.

Algorithm for parse_args():
1. For each argument passed:

2.    If the argument is a special character, continue through loop

3.    Copy the argument to the array of arguments for child process

4. Set a NULL at the end of child arguments for termination

Algorithm for execute():
1. 